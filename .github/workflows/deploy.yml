name: Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: 22.x

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  # Build and test before deployment
  build-and-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests
        run: npm test
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run check
        
      - name: Build projects
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.setup.outputs.environment }}
          path: |
            graphql-server/dist
            frontend/build
            frontend/.svelte-kit/output
          retention-days: 7

  # Deploy GraphQL Server
  deploy-server:
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.setup.outputs.environment }}
          
      - name: Deploy to server
        run: |
          echo "Deploying GraphQL server to ${{ needs.setup.outputs.environment }}"
          # Add your deployment commands here
          # Example: rsync, docker build/push, serverless deploy, etc.
          
          # Option 1: Traditional deployment
          # rsync -avz --delete graphql-server/dist/ user@server:/app/
          
          # Option 2: Docker deployment (recommended)
          # docker build -f Dockerfile.server -t nhl-standings-server .
          # docker save nhl-standings-server | ssh user@server 'docker load'
          # ssh user@server 'docker stop nhl-standings-server || true'
          # ssh user@server 'docker run -d --name nhl-standings-server -p 4000:4000 nhl-standings-server'
          
  # Deploy Frontend
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.setup.outputs.environment }}
          
      - name: Deploy to static hosting
        run: |
          echo "Deploying frontend to ${{ needs.setup.outputs.environment }}"
          # Add your deployment commands here
          # Example: aws s3 sync, vercel deploy, netlify deploy, etc.
          
          # Option 1: Static hosting (Vercel, Netlify, S3)
          # aws s3 sync frontend/build/ s3://your-bucket/ --delete
          
          # Option 2: Docker deployment with Nginx
          # docker build -f Dockerfile.frontend -t nhl-standings-frontend .
          # docker save nhl-standings-frontend | ssh user@server 'docker load'
          # ssh user@server 'docker stop nhl-standings-frontend || true'
          # ssh user@server 'docker run -d --name nhl-standings-frontend -p 3000:80 nhl-standings-frontend'
          
          # Option 3: Container registry + cloud deployment
          # docker build -f Dockerfile.frontend -t registry.example.com/nhl-standings-frontend:latest .
          # docker push registry.example.com/nhl-standings-frontend:latest

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: [setup, deploy-server, deploy-frontend]
    if: always()
    steps:
      - name: Check GraphQL server health
        run: |
          echo "Checking GraphQL server health for ${{ needs.setup.outputs.environment }}"
          # Add health check commands here
          # Example: curl health endpoint, run smoke tests, etc.
          
      - name: Check frontend health
        run: |
          echo "Checking frontend health for ${{ needs.setup.outputs.environment }}"
          # Add health check commands here
          # Example: curl frontend URL, check critical paths, etc.
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment to ${{ needs.setup.outputs.environment }} successful"
          else
            echo "❌ Deployment to ${{ needs.setup.outputs.environment }} failed"
          fi
          # Add notification commands here
          # Example: Slack notification, email, etc.