name: Coverage

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      - name: Install dependencies
        run: npm run install:all

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check GraphQL Server Coverage Thresholds
        run: |
          cd graphql-server
          npm run test:coverage
          if [ $? -ne 0 ]; then
            echo "::error::GraphQL Server coverage thresholds not met"
            exit 1
          fi

      - name: Check Svelte Frontend Coverage Thresholds
        run: |
          cd front-end/
          npm run test:coverage
          if [ $? -ne 0 ]; then
            echo "::error::Svelte Frontend coverage thresholds not met"
            exit 1
          fi

      - name: Generate Coverage Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f graphql-server/coverage/coverage-summary.json ]; then
            echo "### GraphQL Server Coverage" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat graphql-server/coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f front-end/coverage/coverage-summary.json ]; then
            echo "### Svelte Frontend Coverage" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat front-end/coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./graphql-server/coverage/lcov.info,./front-end/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs');
              let comment = '## ðŸ“Š Coverage Report\n\n';

              / GraphQL Server coverage
              try {
                const serverCoverage = JSON.parse(fs.readFileSync('graphql-server/coverage/coverage-summary.json', 'utf8'));
                const total = serverCoverage.total;
                comment += `### GraphQL Server\n`;
                comment += `- **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})\n`;
                comment += `- **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n`;
                comment += `- **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n`;
                comment += `- **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n\n`;
              } catch (error) {
                comment += '### GraphQL Server\nCoverage data not available\n\n';
              }

              / Frontend coverage
              try {
                const frontendCoverage = JSON.parse(fs.readFileSync('front-end/coverage/coverage-summary.json', 'utf8'));
                const total = frontendCoverage.total;
                comment += `### Svelte Frontend\n`;
                comment += `- **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})\n`;
                comment += `- **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n`;
                comment += `- **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n`;
                comment += `- **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n\n`;
              } catch (error) {
                comment += '### Svelte Frontend\nCoverage data not available\n\n';
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error commenting on PR:', error.message);
            }
